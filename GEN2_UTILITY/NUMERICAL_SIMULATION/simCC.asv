function simData = simCC(varargin)
%SIMCC Simulate constant-current dis/charge of a LMB cell in COMSOL.
%
% -- Usage --
% simData = simCC(cellModel, I, soc0Pct, socfPct) simulates the
%   response of the full-order cell model CELLMODEL to a constant 
%   dis/charge current of value I [A]. The initial SOC is set by SOC0PCT 
%   [%] and the final SOC by SOCFPCT [%]. 
%   * The COMSOL LiveLink interface for MATLAB must be running. *
%
% simData = simCC(cellModel, Iavg, soc0Pct, socfPct, TdegC) also
%   specifies the temperature [degC] at which the simulation is run.
%
% simData = simCC(...,'Ts',Ts) uses sampling interval Ts [sec]
%   instead of the default (Tend/1000, where Tend is the duration of the
%   input).
%
% simData = simCC(...,'Verbose',true) outputs status information to
%   the command window.
%
% simData = simCC(...,'OptSimFOM',opt) passes the options structure
%   OPT to simFOM when running the COMSOL simulation.
%
% simData = simCC(...,'DryRun',true) performs all calculations, but
%   does not run the simulation in COMSOL. Useful for generating the
%   current waveform for the constant-current discharge.
%
% -- Output --
% The output, SIMDATA, is a structure with the following fields:
%
%   simData.time       = time vector [s]
%   simData.iapp       = applied current vector [A]
%   simData.vcell      = cell voltage vector [V] (omitted for 'DryRun')
%   simData.zavg       = average fractional SOC vector (porous electrode)
%   simData.thetaAvg   = average stiochiometry vector (porous electrode)
%   simData.Qdis       = total charge removed from cell (- for added) [Ah]
%   simData.Ipk        = peak value (amplitude) of the iapp half-wave [A]
%   simData.f0         = cyclic frequency of the iapp sinusoid [Hz]
%   simData.Tend       = duration of the half-wave [s]
%   simData.param      = structure of parameter values supplied to function
%
% -- References --
% [1] Daniel R. Baker and Mark W. Verbrugge 2021 J. Electrochem. Soc. 168 050526
%
% -- Changelog --
% 2023.06.06 | Add 'DryRun' option | Wesley Hileman
% 2023.05.30 | Created | Wesley Hileman <whileman@uccs.edu>

parser = inputParser;
parser.addRequired('cellModel',@(x)isscalar(x)&&isstruct(x));
parser.addRequired('I',@(x)isscalar(x)&&x>0);
parser.addRequired('soc0Pct',@(x)isscalar(x)&&0<=x&&x<=100);
parser.addRequired('socfPct',@(x)isscalar(x)&&0<=x&&x<=100);
parser.addOptional('TdegC',25,@(x)isscalar(x));
parser.addParameter('Ts',[],@(x)isscalar(x)&&x>0);
parser.addParameter('Verbose',false,@(x)isscalar(x)&&islogical(x));
parser.addParameter('OptSimFOM',struct,@isstruct);
parser.addParameter('DryRun',false,@(x)isscalar(x)&&islogical(x));
parser.parse(varargin{:});
arg = parser.Results;  % structure of validated params

if isfield(arg.cellModel,'function')
    Q = arg.cellModel.function.const.Q();
else
    p = getCellParam( ...
        arg.cellModel,'const.Q pos.theta0 pos.theta100','TdegC',arg.TdegC);
    Q = p.const.Q;
end

% Compute cell capacity to discharge (will be negative for charge).
Qdis = Q*(arg.soc0Pct-arg.socfPct)/100;   % capacity to discharge [Ah] 

% Compute constant-current waveform parameters.
Tend = 3600*Qdis/arg.I;         % time at end of dis/charge [s]
if isempty(arg.Ts)
    arg.Ts = Tend/1000;         % default sampling interval [s]
end
time = 0:arg.Ts:Tend;           % time vector [s]
iapp = arg.I*ones(size(time));  % applied current vector [A]

if ~arg.DryRun
    % Generate COMSOL model.
    if arg.Verbose
        fprintf('Generating COMSOL model for half-cycle simulation... ');
    end
    modelCOMSOL = genFOM(arg.cellModel,'DebugFlag',false);
    if arg.Verbose
        fprintf('done!\n');
    end

    % Perform simulation in COMSOL.
    simspec.time = time;
    simspec.mag = Ipk;
    simspec.freq = f0;
    simspec.SOC0 = arg.soc0Pct;
    simspec.T = arg.TdegC;
    simspec.TSHIFT = 0; % no need to shift for initial discontinuity (sine)
    if arg.Verbose
        fprintf('Running half-cycle simulation...\n');
    end
    [~,sim] = simFOM(modelCOMSOL,simspec,'InputType','sin',arg.OptSimFOM);
    if arg.Verbose
        fprintf('done!\n');
    end
end

simData.time = time(:);
simData.iapp = iapp(:);
if ~arg.DryRun
    simData.vcell = sim.Vcell(:);
end
simData.zavg = zavg(:);
simData.thetaAvg = thetaAvg(:);
simData.Qdis = Qdis;
simData.Ipk = Ipk;
simData.f0 = f0;
simData.Tend = Tend;
simData.param = arg;
simData.origin__ = 'simHalfCycle';

end